import json
import ROOT
import argparse

class Plots :
    def __init__(self, json:str):
        #path to json
        self.__json = json
        

    def read_json(self):
        
        try:
            with open(self.__json, "r") as file:
                data = json.load(file)
                for entry in data['lines']:
                    if 'issignal' not in entry:
                        entry['issignal'] = False


            return data
        
        except FileNotFoundError:
            print(f' Error: {self.__json} not found.')
            return None
        
        except json.JSONDecodeError:
            print(f'Error: {self.__json} not in JSON format')
            return None
        
        
        
    # filename = self.__files + (name of file)
    def file_getter(self, filename):

        try:
            with open(filename, 'r') as local_file:
                file_content = local_file.read()
            return file_content
        
        except FileNotFoundError as e:
            print(f"File not found: {e}")
            return None

    def data_processing(self):
        
        data = self.read_json()
        main_counter = 0
        c1 = ROOT.TCanvas("c1", "c1", 800, 600)
        stack = ROOT.THStack('stack', 'Multiple histograms')

        variables = ["LepPt"]

        for variable in variables: 
            for entry in data['lines']:
                colour = entry['color']
                Process_hist = ROOT.TH1D("nome", entry['tag'], 20, 0, 100) #definir valor fixo, mudar nome de variavel
                counter = 0

                  #lista de variaveis, alterar posteriomente para ser passada como argumento
                chain = ROOT.TChain("bdttree")

                for b_file in entry['files']:
                    #file = ROOT.TFile(f'/user/c/cbeiraod/local-area/Verao2023/2016/{b_file["tag"]}.root')   #alterar com o path também se quisermos
                    chain.Add(f'/user/c/cbeiraod/local-area/Verao2023/2016/{b_file["tag"]}.root')
                    """tree = file.Get("bdttree")

                    hist_name = f'{b_file["tag"]}'
                    hist_number = f'Histogram {counter}'

                    hist = ROOT.TH1D(hist_name, hist_number, 20, 0, 100) #personalizar o numero de bin e dimensoes
                    
                    
                    tree.Draw(f'{variable}>>{hist_name}',"weight", "goff") #corrigir, está tudo a ser enviado para o mesmo histograma    
                    
                    #hist.SetFillColor(colour)
                    Process_hist.Add(hist)
                    counter += 1"""
                    
                chain.Draw(f'{variable}>> nome ',f'weight*({prefilter})*({selection})', "goff")
                Process_hist.SetFillColor(colour)
                if entry['isdata']:
                    
                    Process_hist.Draw()
                else: 
                    Process_hist.Draw('hist')

                c1.SaveAs(f'Histogram{entry["tag"]}_{variable}.pdf') #adiciona r ciclo externo e o nome da variavel ao titulo
                main_counter += 1
                
                if not entry['isdata'] or entry['issignal']:
                    stack.Add(Process_hist)
            
            stack.Draw()
            #draw data e sinal
            #adicionar se queremos draw do data ou não, default = no
            c1.BuildLegend(0.8, 0.8, 0.7, 0.7)
            c1.SaveAs(f'Stack{variable}.pdf')#adicionar varavel aqui tambem

            #ciclo externo termina aqui

                    
        return None
    
    

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Read JSON file")
    parser.add_argument("-j", "--json", type=str)
    #parser.add_argument("-f", "--files", type=str)
    #parser.add_argument("-v", "--variables", type=list)
    args = parser.parse_args()

    graf = Plots(args.json)
    graf.data_processing()




"""
baseDir_(baseDir),
  suffix_(suffix),
  
  tag_(""),
  label_(""),
  isdata_(false),
  issignal_(false),
  isfastsim_(false),
  spimpose_(false),
  color_(1),
  lcolor_(1),
  lwidth_(1),
  lstyle_(1),
  fill_(0),
  marker_(1),
  mcolor_(1),
  
  filtered_(nullptr),
  tmpFile_(nullptr),
  tmpDirectory_("")

  mcolor = color"""

